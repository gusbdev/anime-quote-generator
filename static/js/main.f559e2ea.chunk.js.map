{"version":3,"sources":["store/index.js","components/AnimePill/AnimePill.jsx","components/Pagination/Pagination.jsx","components/Quote/Quote.jsx","pages/home/index.jsx","components/SmallQuote/SmallQuote.jsx","pages/anime/index.jsx","App.js","index.js"],"names":["animeTitles","atom","key","default","animeListPageNum","sliceAnimeTitle","selector","get","animes","pageNum","arrIndex","splice","StyledPill","styled","div","AnimePill","anime","color","style","background","to","StyledPagination","Pagination","listLength","useRecoilState","setPageNum","useState","numsArr","setNumsArr","useEffect","max","Math","floor","nums","i","push","sort","a","b","paginationNums","length","map","num","className","onClick","StyledQuote","Quote","quote","StyledHomePage","Homepage","useRecoilValue","slicedAnimes","colors","generateColor","randNum","random","margin","StyledSmallQuote","SmallQuote","character","StyledAnimePage","Animepage","param","useParams","quotes","setQuotes","loading","setLoading","name","axios","res","data","console","log","fetchAnimeQuotes","index","App","setTitles","useSetRecoilState","fetchAnimes","useCallback","response","error","exact","path","component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f559e2ea.chunk.js","sourcesContent":["import { atom, selector } from \"recoil\";\n\nexport const animeTitles = atom({\n  key: \"animeTitleList\",\n  default: [],\n});\n\nexport const animeListPageNum = atom({\n    key: \"animeListPageNum\",\n    default: 0,\n});\n\nexport const sliceAnimeTitle = selector({\n    key: \"sliceAnimeTitles\",\n    get: ({get}) => {\n        const animes = get(animeTitles);\n        const pageNum = get(animeListPageNum);\n\n        const newAnimeList = [...animes];\n        const arrIndex = pageNum === 0 ? 0 : pageNum * 50 + 1;\n\n        return newAnimeList.splice(arrIndex, 50);\n    }\n})\n","import {Link} from \"react-router-dom\";\nimport styled from \"styled-components\";\n\nconst AnimePill = ({anime, color}) => {\n    return(\n        <StyledPill style={{ background: color}}>\n            <Link to={`/anime/${anime}`}>{anime}</Link>\n        </StyledPill>\n    )\n}\n\nconst StyledPill = styled.div`\n    border-radius: 999px;\n    & a {\n        display: block;\n        text-decoration: none;\n        color: #333;\n        padding: 1rem 2rem;\n    }\n`;\n\nexport default AnimePill;","import { useEffect, useState } from \"react\";\nimport { useRecoilState } from \"recoil\";\nimport styled from \"styled-components\";\nimport { animeListPageNum } from \"../../store\";\n\nconst Pagination = ({listLength}) => {\n    const [pageNum, setPageNum] = useRecoilState(animeListPageNum);\n    const [numsArr, setNumsArr] = useState([]);\n\n    useEffect(() => {\n        const paginationNums = () => {\n            const max = Math.floor(listLength / 50);\n            let nums = [];\n            for (let i=0; i <= max; i++){\n                nums.push(max - i);\n            }\n            setNumsArr(\n                nums.sort((a,b) => {\n                    return a - b;\n                })\n            );\n        }\n        paginationNums();\n    }, [listLength]);\n\n    return (\n        <StyledPagination>\n            {numsArr?.length\n                ? numsArr?.map((num) => (\n                    <button\n                        className={pageNum === num ? \"active\" : \"\"}\n                        onClick={() => setPageNum(num)}\n                        key={num}\n                    >\n                        {num + 1}\n                    </button>\n                ))\n            : null}\n        </StyledPagination>\n    )\n}\n\nconst StyledPagination = styled.div`\n  display: flex;\n  align-items: center;\n  border-width: 2px 2px 2px 0;\n  border-style: solid;\n  width: max-content;\n  & button {\n    outline: none;\n    background: transparent;\n    border: none;\n    border-left: 2px solid;\n    width: 35px;\n    height: 30px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    &:hover,\n    &.active {\n      background: #fae1da;\n    }\n  }\n`;\n\nexport default Pagination;","import styled from \"styled-components\";\n\nconst Quote = () => {\n    const quote ={\n        anime: \"Naruto\",\n        character: \"Pain\",\n        quote: \"Because of the existence of love - sacrifice is born. As well as hate. Then one comprehends... one knows PAIN.\",\n    }\n\n    return (\n        <StyledQuote>\n            <p>{quote.quote}</p>\n            <h4>\n                <span className=\"character\">{quote.character}</span><em>in</em>{\"\"}\n                <span className=\"anime\">{quote.anime}</span>\n            </h4>\n        </StyledQuote>\n    )\n}\n\nconst StyledQuote = styled.div`\n    background: #dbece5;\n    padding: 3rem 5rem;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    & > p {\n        font-size: 2rem;\n        letter-spacing: 2px;\n        text-align: center;\n        font-style: italic;\n        margin-bottom: 3rem;\n        background: #fff;\n        border-radius: 0.5rem;\n        padding: 3rem;\n    }\n    & > h4 {\n        font-size: 1.5rem;\n        font-weight: 500;\n        letter-spacing: 2px;\n        span {\n            padding: 5px 10px;\n        }\n        em {\n            font-size: 1.2rem;\n        }\n        & > .character {\n            background: #f5e7e4;\n        }\n        & > .anime {\n            background: #f5e7e4;\n        }\n    }\n`;\n\nexport default Quote;","import { useRecoilValue } from \"recoil\";\nimport styled from \"styled-components\";\nimport AnimePill from \"../../components/AnimePill/AnimePill\";\nimport Pagination from \"../../components/Pagination/Pagination\";\nimport Quote from \"../../components/Quote/Quote\";\nimport { sliceAnimeTitle, animeTitles } from \"../../store\";\n\nconst Homepage = () => {\n    const animes = useRecoilValue(animeTitles);\n    const slicedAnimes = useRecoilValue(sliceAnimeTitle);\n    const colors = [\"#FAE1DA\", \"#E8C6AD\", \"#F2E2ED\", \"#D6EBE4\", \"#BFDCD0\"];\n\n    const generateColor = () => {\n        const randNum = Math.floor(Math.random() * 5);\n        return colors[randNum];\n    }\n\n    return(\n        <StyledHomePage>\n            <header>\n                <h2>Anime Quote Generator</h2>\n            </header>\n            <main>\n                <Quote />\n                <div className=\"animes\">\n                    <h3>All Animes</h3>\n                        {animes?.length ? (\n                            <p>Click on any anime to see a quote from it</p>\n                        ) : null}\n                        <div className=\"flex\">\n                            {animes?.length ? (\n                                slicedAnimes?.map((anime) => (\n                                    <div key={anime} style={{ margin: \"0 1.3rem 1.3rem 0\"}}>\n                                        <AnimePill anime={anime} color={generateColor()} />\n                                    </div>\n                                ))\n                            ) : (\n                                <p className=\"nodata\">No anime found 😞</p>\n                            )}\n                        </div>\n                        {animes?.length > 50 ? (\n                            <div className=\"pagination\">\n                                <Pagination listLength={animes?.length} />\n                            </div>\n                        ) : null}\n                </div>\n            </main>\n        </StyledHomePage>\n    )\n\n}\n\nconst StyledHomePage = styled.div`\n  max-width: 80%;\n  margin: 2rem auto;\n  & header {\n    margin-bottom: 3rem;\n    & > h2 {\n      font-weight: 400;\n      letter-spacing: 3px;\n      text-align: center;\n    }\n  }\n  & .animes {\n    margin-top: 4rem;\n    & > h3 {\n      font-weight: 400;\n      font-size: 1.4rem;\n      background: #ece4f1;\n      width: max-content;\n      padding: 0.3rem 1rem;\n    }\n    & > p {\n      margin: 1.2rem 0;\n    }\n    & > .flex {\n      display: flex;\n      justify-content: center;\n      flex-wrap: wrap;\n      & > .nodata {\n        margin: 2rem 0 4rem;\n        font-size: 1.3rem;\n      }\n    }\n    & .pagination {\n      display: flex;\n      flex-direction: column;\n      align-items: center;\n      margin: 2rem 0 4rem;\n    }\n  }\n`;\n\nexport default Homepage;\n","import styled from \"styled-components\";\n\nconst SmallQuote = ({quote, character, anime}) => {\n    return (\n        <StyledSmallQuote>\n            <p>\"{quote}\"</p>\n            <h4>\n                <span className=\"character\">{character}</span> <em>in</em>\n                <span className=\"anime\">{anime}</span>\n            </h4>\n        </StyledSmallQuote>\n    )\n}\n\nconst StyledSmallQuote = styled.div`\n    background: #dbece5;\n    padding: 1.5rem 2.5rem;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    & > p {\n    font-size: 1rem;\n    letter-spacing: 2px;\n    text-align: center;\n    font-style: italic;\n    background: #fff;\n    border-radius: 0.5rem;\n    padding: 1.5rem;\n    margin-bottom: 1.5rem;\n    }\n    & > h4 {\n    font-size: 1rem;\n    font-weight: 500;\n    letter-spacing: 2px;\n    span {\n        padding: 3px 5px;\n    }\n    em {\n        font-size: 1rem;\n    }\n    & > .character {\n        background: #b8dace;\n    }\n    & > .anime {\n        background: #f5e7e4;\n        }\n    }\n`;\n\nexport default SmallQuote;","import { useState, useEffect } from \"react\";\nimport { Link, useParams } from \"react-router-dom\";\nimport axios from \"axios\";\nimport styled from \"styled-components\";\nimport SmallQuote from \"../../components/SmallQuote/SmallQuote\";\n\nconst Animepage = () => {\n  const param = useParams();\n  const [quotes, setQuotes] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    if (param?.name) {\n      setLoading(true);\n      const fetchAnimeQuotes = async () => {\n        try {\n          const res = await axios.get(\n            `https://animechan.vercel.app/api/quotes/anime?title=${param?.name}`\n          );\n          setQuotes(res?.data);\n          setLoading(false);\n        } catch (error) {\n          console.log(error);\n          setLoading(false);\n        }\n      };\n      fetchAnimeQuotes();\n    }\n  }, [param]);\n\n  return (\n    <StyledAnimePage>\n      <h2>Quotes from {param?.name}</h2>\n      <Link to=\"/\">Go back</Link>\n      <div className=\"grid\">\n        {loading ? (\n          <p>Loading...</p>\n        ) : quotes?.length ? (\n          quotes?.map((quote, index) => (\n            <div key={quote?.quote + index} className=\"anime\">\n              <SmallQuote\n                anime={quote?.anime}\n                character={quote?.character}\n                quote={quote?.quote}\n              />\n            </div>\n          ))\n        ) : (\n          <p className=\"nodata\">No Quote found 😞</p>\n        )}\n      </div>\n    </StyledAnimePage>\n  );\n};\n\nconst StyledAnimePage = styled.div`\n  max-width: 80%;\n  margin: 2rem auto;\n  position: relative;\n  & > a {\n    position: absolute;\n    top: 1rem;\n    text-decoration: none;\n  }\n  & > h2 {\n    font-weight: 400;\n    letter-spacing: 3px;\n    text-align: center;\n    margin-bottom: 2rem;\n  }\n  & > .grid {\n    display: grid;\n    grid-template-columns: repeat(2, 1fr);\n    grid-template-rows: max-content;\n    & .anime {\n      margin: 1rem;\n      height: max-content;\n    }\n    & > p {\n      margin: 2rem 0 4rem;\n      font-size: 1.3rem;\n      text-align: center;\n    }\n  }\n`;\nexport default Animepage;","\nimport { useCallback, useEffect } from \"react\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport { useSetRecoilState } from \"recoil\";\nimport axios from \"axios\";\nimport { animeTitles } from \"./store\";\nimport Homepage from \"./pages/home\";\nimport Animepage from \"./pages/anime\";\n\nconst App = () => {\n\tconst setTitles = useSetRecoilState(animeTitles);\n\n\tconst fetchAnimes = useCallback(async () => {\n\t\ttry {\n\t\t\tconst res = await axios.get(\n\t\t\t\t\"https://animechan.vercel.app/api/available/anime\"\n\t\t\t);\n\n\t\t\tsetTitles(res?.data);\n\t\t} catch (error) {\n\t\t\tconsole.log(error?.response?.data?.error);\n\t\t}\n\t}, [setTitles]);\n\n\tuseEffect(() => {\n\t\tfetchAnimes();\n\t}, [fetchAnimes]);\n\n\treturn (\n\t\t<BrowserRouter>\n\t\t\t<Switch>\n\t\t\t\t<Route exact path=\"/\" component={Homepage} />\n\t\t\t\t<Route exact path=\"/anime/:name\" component={Animepage} />\n\t\t\t</Switch>\n\t\t</BrowserRouter>\n\t);\n};\n\nexport default App;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { RecoilRoot } from \"recoil\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <RecoilRoot>\n    <App />\n  </RecoilRoot>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}